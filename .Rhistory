temp$cooling_kWh <- apply(temp[,c(2:3)], 1, function(row){sum(row)})
temp$month <- month(temp$timestamp)
temp <- group_by(temp, month)
temp <- summarise(temp, cooling_kWh = sum(cooling_kWh))
#temp$cooling_kWh <- temp$cooling_kWh/units
colnames(temp)[2] <- county
if(i == 1) final <- temp else final <- left_join(final, temp, by = "month")
print(i)
}
sum(apply(final[,c(2:73)], 2, function(col){sum(col)}))/units
final <- NA
units <- 0
for(i in 1:length(files)){
temp <- read.csv(files[i])
units <- unique(temp$units_represented)
county <- unique(temp$in.county)
temp <- select(temp, timestamp, out.electricity.cooling.energy_consumption, out.electricity.fans_cooling.energy_consumption)
temp$cooling_kWh <- apply(temp[,c(2:3)], 1, function(row){sum(row)})
temp$month <- month(temp$timestamp)
temp <- group_by(temp, month)
temp <- summarise(temp, cooling_kWh = sum(cooling_kWh))
temp$cooling_kWh <- temp$cooling_kWh/units
colnames(temp)[2] <- county
if(i == 1) final <- temp else final <- left_join(final, temp, by = "month")
print(i)
}
counties <- colnames(final)[c(2:73)]
counties <- str_remove(counties, "G550")
counties <- paste0("55", str_remove(counties, "0$"))
colnames(final)[c(2:73)] <- counties
write.csv(final, "cooling kWh by county.csv", row.names = F)
#set working directory
rm(list = ls())
setwd("~/Documents/GitHub/heatpump-CBA")
# read in necessary libraries
### if not downloaded on your computer, first run the install.packages
### commands that have been commented out
#install.packages("stringr")
#install.packages("dplyr")
#install.packages("purrr")
#install.packages("readxl")
#install.packages("lubridate")
library(stringr)
library(dplyr)
library(purrr)
library(readxl)
library(lubridate)
################### set functions ########################################
############### functions to be used for calculations #####################
## calculate proportion of a year's heating that comes in each temperature bin
heatingbin_adjust <- function(indoor_design_temperature, outdoor_design_temperature,
temperature_bin_hours){
## reduce the temperature bin hours dataset to just the temperature bins that
## we will consider for our calculations
temperature_bin_hours <- filter(temperature_bin_hours, HLY.TEMP.NORMAL < indoor_design_temperature)
## calculates the distance between outdoor design temp and when design
## heating load reaches 0 (aka indoor design temperature), also could be thought
##of as the distance of the x-axis in a design heating load graph
temperature_distance <- indoor_design_temperature - outdoor_design_temperature
## We now assume that the design heating load (measured in btu/hour) falls
## linearly with temperature until it reaches 0 at the indoor temperature.
## Knowing the hours in the year in different temperature bins and the final
## average annual heating load of a house in WI, we can back out a calculation
## of the proportion of the annual heating load that comes in each temperature
## bin
temperature_bin_hours$load_proportion <- 0
## we model the design heating load as a linear model y = mx + b, where y is the
## design heating load, b is the design heating load in btu/hr at the design
## heating temperature and y = 0 @ the indoor design temperature.
## We can find the design heating load at each temperature given in terms of
## the design heating load variable "b" and then the sum of all of those values should
## equal the annual heating load of the house.
# we proceed by solving the equation:
#"annual_heating_load_in_a_temp_bin = sum of design_heating_load_in_each_temp_hour
# where design_heating_load_in_each_temp_hour = y = mx+b
## One key to this equation is that at the indoor design temp, the design heating load = 0,
## therefore, 0 = m(temperature_distance)+b and we find that m = -b/temperature_distance.
## plugging this back into the design_heating_load_in_each_temp_hour equation
## and we get y = -bx/temperature_distance + b.
## Therefore, the result that we find in the "load_proportion" variable is simply the constant on b
## in the above equation, i.e. (temperature_distance - x)/temperature_distance
temperature_bin_hours$distance <- temperature_bin_hours$HLY.TEMP.NORMAL - outdoor_design_temperature
temperature_bin_hours$load_proportion <- (temperature_distance-temperature_bin_hours$distance)/temperature_distance
return(temperature_bin_hours)
}
## calculate the proportion of heating that is covered by the backup system
## given a switchover temperature
backupheatingload <- function(heating_bin_hours, switchover_temp){
backup <- filter(heating_bin_hours, HLY.TEMP.NORMAL < switchover_temp)
total_prop <- sum(heating_bin_hours$load_proportion)
backup_prop <- sum(backup$load_proportion)
return(heating_load*backup_prop/total_prop)
}
# calculate the average COP of the ASHP for cooling and for heating
# for heating, it uses COP values at 5 and 65 degrees Fahrenheit
# for cooling, it uses COP values at
annual_COP <- function(COP_low, COP_high, temperature_bin_hours,
switchover_temp, heating_yes){
## for heating, remove temperature bin data covered by backup heating
if(heating_yes){
if(switchover_temp >= 65) return(1)
temperature_bin_hours <- filter(temperature_bin_hours, HLY.TEMP.NORMAL > switchover_temp)
}
#calculate the slope of the COP at which COP changes with temperature
## we assume that COP changes linearly (while fundamentally untrue, we believe
## this is a reasonable assumption at the temperatures we're looking at)
###42 is the distance between 47 and 5, the two temperatures at which we get heating COPs
###13 is the distance between 95 and 82, the temperatures at which we get cooling COPs
if(heating_yes) {COP_slope <- abs(COP_high-COP_low)/42
}else{COP_slope <- abs(COP_high - COP_low)/13}
# create some variables to calculate COP for the different temperature bins
temperature_bin_hours$COP <- 0
## set COP_high to be the COP at 65 degrees
if(heating_yes){
COP_high <- COP_high + COP_slope*(65-47)
temperature_bin_hours$COP <- COP_high - COP_slope*(65-temperature_bin_hours$HLY.TEMP.NORMAL)
} else{
COP_high <- COP_high + COP_slope*(82-65)
TKTK
}
# working off of the strategy used to calculate backup heating load, we now
# come up with weights for the different COP values. For example, if the COP
# at 35 degrees is 3.4, that should be weighted by the amount of heating
# the ASHP needs to provide during that temperature bin. We've already calculated
# this value in the backup heating function and it is the constant that is multiplied
# with b to find the design heating temp y.
total_load <- sum(temperature_bin_hours$load_proportion)
temperature_bin_hours$COP.Weight <- temperature_bin_hours$load_proportion/total_load
return(sum(temperature_bin_hours$COP.Weight*temperature_bin_hours$COP))
}
methane_leak <- function(input, methane_leakage_rate, energy_rate, density){
# convert the fuel/electricity input from mmBTUs to volume
## for electricity it's volume of fuel needed to create the electricity
input_volume <- input/energy_rate
# convert from volume to kilograms
input_weight <- input_volume*density
# use the leakage rate, which is as a proportion of produced fuel,
# to implied kg of methane
methane_leaked <- input_weight*methane_leakage_rate
# return the CO2e of the leaked methane
return(methane_leaked*GWP_CH4)
}
#################### set key variables #####################
##### constants #####
#100-year global warming potential
#"Gases are converted to CO2e by multiplying by their global warming potential (GWP)"
GWP_CO2 <- 1
GWP_CH4 <- 28
GWP_N2O <- 265
#### monte carlo variables
set.seed(1111)
n_trials <- 1000
years_of_analysis <- 15 ### 2021-2035
#### set scenario variables ####
### comment out the ones that you don't want to use
##discount rate
#discount_rate <- 0.07
discount_rate <- 0.02
## determine whether just the heat pumps heating should be considered or
## also it's cooling. If cooling is included, then the baseline scenario will
## include the cost of installing a new AC and the fuel cost of covering
## the cooling load.
#cooling <- T # yes cooling
cooling <- F # no cooling
## determine carbon intensity of the grid
#### does so by specifying the year when the grid will have 0 emissions
#### the "aggressive decarbonization" option is meant to simulate a grid that becomes
#### 80% cheaper by 2035 and assumes it does so linearly and doesn't actually reflect
#### a belief that the grid will reach 0 carbon emissions by 2039. This comes from
#### the fact that some utilities are planning to remove all coal by 2035. The
#### grid may move much more slowly to 0 after those first 16 years and not actually
#### reach 0 by 2039.
decarb_year <- 2050 #BAU
##### read in necessary files ######################################
#### read in the geographic dataframe:
## counties
geo <- read.csv("./creating geographic data set/county_installprice_all_elec.csv")
geo$mean_NG <- 0
geo$mean_HO <- 0
geo$mean_P <- 0
geo$perc_NG <- 0
geo$perc_HO <- 0
geo$perc_P <- 0
#### read in and set up price projections for later
### values from EIA's projected costs of fuel/electricity over time.
projections_base <- read.csv("Energy_Prices_Residential_projections.csv", skip = 4)
#changes order so first row is year 1 (i.e. 2021)
projections_base <- arrange(projections_base, Year)
## convert to growth rates instead of absolute numbers
## keep the projections_base data since we will use it for areas for which we don't
## have spatial data
base <- projections_base[1,]
fuel_cost_growth_rates_base <- as.data.frame(t(apply(projections_base, 1, function(rowval) unlist(rowval / base))))
#### read in list of ASHP COPs
ASHP_COPs <- read.csv("ASHP random sample.csv")
ASHP_COPs <- select(ASHP_COPs, starts_with("cop"))
## climate zones
climate_zone_base <- read.csv("./Temperature Data/HDD zones by county.csv")
## Annual temperatures
## source: https://www.ncei.noaa.gov/access/search/data-search/normals-hourly-2006-2020
temperature_bin_hours_base <- read.csv("./Temperature Data/2020 15 year temp normals in WI by 11 HDD zones.csv")
## indoor design temperature
#source: https://focusonenergy.com/sites/default/files/bpdeemedsavingsmanuav10_evaluationreport.pdf
indoor_design_temperature <- 65 #degrees Fahrenheit
## outdoor design temperature csv
#source: https://casetext.com/regulation/wisconsin-administrative-code/agency-department-of-safety-and-professional-services/safety-buildings-and-environment/commercial-building-code/chapter-sps-363-energy-conservation/subchapter-ii-changes-additions-or-omissions-to-the-international-energy-conservation-code-iecc/section-sps-3630302-exterior-design-conditions
outdoor_design_temperature_base <- read.csv("./Temperature Data/Outdoor design temps by county.csv")
### weights for calculating annual fuel costs
weights_base <- read.csv("./Temperature Data/HDD Proportions by Month by Climate Zone Using 2020 15 Year Normals.csv")
colnames(weights_base)[1] <- "Month"
## electricity
elec_cost_base <- read.csv("./final electricity data.csv")
# heating load
heating_load_base <- read.csv("./NREL data/heating and cooling load/heating load by county.csv")
# cooling kWh
cooling_kWh_base <- read.csv("./NREL data/heating and cooling load/cooling kWh by county.csv")
## Annual temperatures
## source: https://www.ncei.noaa.gov/access/search/data-search/normals-hourly-2006-2020
temperature_bin_hours_base <- read.csv("./NREL Data/typical meteorological year weather/temperature data by county.csv")
## indoor design temperature
#source: https://focusonenergy.com/sites/default/files/bpdeemedsavingsmanuav10_evaluationreport.pdf
indoor_design_temperature <- 65 #degrees Fahrenheit
## outdoor design temperature csv
#source: https://casetext.com/regulation/wisconsin-administrative-code/agency-department-of-safety-and-professional-services/safety-buildings-and-environment/commercial-building-code/chapter-sps-363-energy-conservation/subchapter-ii-changes-additions-or-omissions-to-the-international-energy-conservation-code-iecc/section-sps-3630302-exterior-design-conditions
outdoor_design_temperature_base <- read.csv("./Temperature Data/Outdoor design temps by county.csv")
### weights for calculating annual fuel costs
weights_base <- read.csv("./Temperature Data/HDD Proportions by Month by Climate Zone Using 2020 15 Year Normals.csv")
colnames(weights_base)[1] <- "Month"
## electricity
elec_cost_base <- read.csv("./final electricity data.csv")
# heating load
heating_load_base <- read.csv("./NREL data/heating and cooling load/heating load by county.csv")
# cooling kWh
cooling_kWh_base <- read.csv("./NREL data/heating and cooling load/cooling kWh by county.csv")
## not to keep
### installation sizing and efficiency
### TKTKTK
size <- 2
efficiency <- 16
ASHP_installment_file_base <- read.csv(paste0("./Installation costs/cost to install heat pump - ",size," ton ", efficiency, " SEER.csv"))
AC_installment_file_base <- read.csv(paste0("./Installation costs/cost to install AC - ",size," ton ", efficiency, " SEER.csv"))
NG_P_installment_file_base <- read.csv(paste0("./Installation costs/cost to install NG furnace - 70K BTU 92%+ efficiency.csv"))
HO_installment_file_base <- read.csv(paste0("./Installation costs/cost to install oil furnace - 70K BTU 85%+ efficiency.csv"))
###efficiency variables - note that efficiency is a unitless value
# this can be thought of as the average efficiency of whichever furnace across
# users in Wisconsin
naturalgas_furnace_efficiency <- .95
heatingoil_furnace_efficiency <- .9
propane_furnace_efficiency <- .9
### clean the spatial dataset and determine which electric utility's data to use
geo <- filter(geo, AnalysisArea > 0.5)
geo <- filter(geo, !is.na(FIPS))
geo <- filter(geo, !(FID_COOP_UTILITY_BOUNDARIES_COO == -1 & FID_WI_IOU_UTILITY_BOUNDARIES_W == -1 & FID_WI_MUNI_UTILITY_BOUNDARIES_ == -1))
## we assume that the hierarchy of electricity usage is municipality >> coop >> IOU
geo <- mutate(geo, elec_utility = ifelse(FID_WI_MUNI_UTILITY_BOUNDARIES_ != -1, PSC_ID,
ifelse(FID_COOP_UTILITY_BOUNDARIES_COO != -1,
PSC_ID_1, PSC_ID_12)))
k <- 1
county <- geo[k,]$FIPS
price_region <- geo[k,]$price_region
elec_utility <- geo[k,]$elec_utility
#temperature bins
temperature_bin_hours <- filter(temperature_bin_hours_base, county == county)
temperature_bin_hours <- select(temperature_bin_hours, temperature)
temperature_bin_hours <- arrange(temperature_bin_hours, temperature)
#outdoor design temperature
outdoor_design_temperature <- filter(outdoor_design_temperature_base, county_fips == county)
outdoor_design_temperature <- outdoor_design_temperature$Outdoor.Design.Temp
# heating load
heating_load <- select(heating_load_base, contains(as.character(county)))
heating_load <- sum(heating_load[,1])
# cooling kWh
cooling_kWh <- select(cooling_kWh_base, contains(as.character(county)))
View(cooling_kWh)
cooling_kWh <- sum(cooling_kWh[,1])
rm(list = ls())
#set working directory
rm(list = ls())
setwd("~/Documents/GitHub/heatpump-CBA")
# read in necessary libraries
### if not downloaded on your computer, first run the install.packages
### commands that have been commented out
#install.packages("stringr")
#install.packages("dplyr")
#install.packages("purrr")
#install.packages("readxl")
#install.packages("lubridate")
library(stringr)
library(dplyr)
library(purrr)
library(readxl)
library(lubridate)
################### set functions ########################################
############### functions to be used for calculations #####################
## calculate proportion of a year's heating that comes in each temperature bin
heatingbin_adjust <- function(indoor_design_temperature, outdoor_design_temperature,
temperature_bin_hours){
## reduce the temperature bin hours dataset to just the temperature bins that
## we will consider for our calculations
temperature_bin_hours <- filter(temperature_bin_hours, HLY.TEMP.NORMAL < indoor_design_temperature)
## calculates the distance between outdoor design temp and when design
## heating load reaches 0 (aka indoor design temperature), also could be thought
##of as the distance of the x-axis in a design heating load graph
temperature_distance <- indoor_design_temperature - outdoor_design_temperature
## We now assume that the design heating load (measured in btu/hour) falls
## linearly with temperature until it reaches 0 at the indoor temperature.
## Knowing the hours in the year in different temperature bins and the final
## average annual heating load of a house in WI, we can back out a calculation
## of the proportion of the annual heating load that comes in each temperature
## bin
temperature_bin_hours$load_proportion <- 0
## we model the design heating load as a linear model y = mx + b, where y is the
## design heating load, b is the design heating load in btu/hr at the design
## heating temperature and y = 0 @ the indoor design temperature.
## We can find the design heating load at each temperature given in terms of
## the design heating load variable "b" and then the sum of all of those values should
## equal the annual heating load of the house.
# we proceed by solving the equation:
#"annual_heating_load_in_a_temp_bin = sum of design_heating_load_in_each_temp_hour
# where design_heating_load_in_each_temp_hour = y = mx+b
## One key to this equation is that at the indoor design temp, the design heating load = 0,
## therefore, 0 = m(temperature_distance)+b and we find that m = -b/temperature_distance.
## plugging this back into the design_heating_load_in_each_temp_hour equation
## and we get y = -bx/temperature_distance + b.
## Therefore, the result that we find in the "load_proportion" variable is simply the constant on b
## in the above equation, i.e. (temperature_distance - x)/temperature_distance
temperature_bin_hours$distance <- temperature_bin_hours$HLY.TEMP.NORMAL - outdoor_design_temperature
temperature_bin_hours$load_proportion <- (temperature_distance-temperature_bin_hours$distance)/temperature_distance
return(temperature_bin_hours)
}
## calculate the proportion of heating that is covered by the backup system
## given a switchover temperature
backupheatingload <- function(heating_bin_hours, switchover_temp){
backup <- filter(heating_bin_hours, HLY.TEMP.NORMAL < switchover_temp)
total_prop <- sum(heating_bin_hours$load_proportion)
backup_prop <- sum(backup$load_proportion)
return(heating_load*backup_prop/total_prop)
}
# calculate the average COP of the ASHP for cooling and for heating
# for heating, it uses COP values at 5 and 65 degrees Fahrenheit
# for cooling, it uses COP values at
annual_COP <- function(COP_low, COP_high, temperature_bin_hours,
switchover_temp, heating_yes){
## for heating, remove temperature bin data covered by backup heating
if(heating_yes){
if(switchover_temp >= 65) return(1)
temperature_bin_hours <- filter(temperature_bin_hours, HLY.TEMP.NORMAL > switchover_temp)
}
#calculate the slope of the COP at which COP changes with temperature
## we assume that COP changes linearly (while fundamentally untrue, we believe
## this is a reasonable assumption at the temperatures we're looking at)
###42 is the distance between 47 and 5, the two temperatures at which we get heating COPs
###13 is the distance between 95 and 82, the temperatures at which we get cooling COPs
if(heating_yes) {COP_slope <- abs(COP_high-COP_low)/42
}else{COP_slope <- abs(COP_high - COP_low)/13}
# create some variables to calculate COP for the different temperature bins
temperature_bin_hours$COP <- 0
## set COP_high to be the COP at 65 degrees
if(heating_yes){
COP_high <- COP_high + COP_slope*(65-47)
temperature_bin_hours$COP <- COP_high - COP_slope*(65-temperature_bin_hours$HLY.TEMP.NORMAL)
} else{
COP_high <- COP_high + COP_slope*(82-65)
TKTK
}
# working off of the strategy used to calculate backup heating load, we now
# come up with weights for the different COP values. For example, if the COP
# at 35 degrees is 3.4, that should be weighted by the amount of heating
# the ASHP needs to provide during that temperature bin. We've already calculated
# this value in the backup heating function and it is the constant that is multiplied
# with b to find the design heating temp y.
total_load <- sum(temperature_bin_hours$load_proportion)
temperature_bin_hours$COP.Weight <- temperature_bin_hours$load_proportion/total_load
return(sum(temperature_bin_hours$COP.Weight*temperature_bin_hours$COP))
}
methane_leak <- function(input, methane_leakage_rate, energy_rate, density){
# convert the fuel/electricity input from mmBTUs to volume
## for electricity it's volume of fuel needed to create the electricity
input_volume <- input/energy_rate
# convert from volume to kilograms
input_weight <- input_volume*density
# use the leakage rate, which is as a proportion of produced fuel,
# to implied kg of methane
methane_leaked <- input_weight*methane_leakage_rate
# return the CO2e of the leaked methane
return(methane_leaked*GWP_CH4)
}
#################### set key variables #####################
##### constants #####
#100-year global warming potential
#"Gases are converted to CO2e by multiplying by their global warming potential (GWP)"
GWP_CO2 <- 1
GWP_CH4 <- 28
GWP_N2O <- 265
#### monte carlo variables
set.seed(1111)
n_trials <- 1000
years_of_analysis <- 15 ### 2021-2035
#### set scenario variables ####
### comment out the ones that you don't want to use
##discount rate
#discount_rate <- 0.07
discount_rate <- 0.02
## determine whether just the heat pumps heating should be considered or
## also it's cooling. If cooling is included, then the baseline scenario will
## include the cost of installing a new AC and the fuel cost of covering
## the cooling load.
#cooling <- T # yes cooling
cooling <- F # no cooling
## determine carbon intensity of the grid
#### does so by specifying the year when the grid will have 0 emissions
#### the "aggressive decarbonization" option is meant to simulate a grid that becomes
#### 80% cheaper by 2035 and assumes it does so linearly and doesn't actually reflect
#### a belief that the grid will reach 0 carbon emissions by 2039. This comes from
#### the fact that some utilities are planning to remove all coal by 2035. The
#### grid may move much more slowly to 0 after those first 16 years and not actually
#### reach 0 by 2039.
decarb_year <- 2050 #BAU
##### read in necessary files ######################################
#### read in the geographic dataframe:
## counties
geo <- read.csv("./creating geographic data set/county_installprice_all_elec.csv")
geo$mean_NG <- 0
geo$mean_HO <- 0
geo$mean_P <- 0
geo$perc_NG <- 0
geo$perc_HO <- 0
geo$perc_P <- 0
#### read in and set up price projections for later
### values from EIA's projected costs of fuel/electricity over time.
projections_base <- read.csv("Energy_Prices_Residential_projections.csv", skip = 4)
#changes order so first row is year 1 (i.e. 2021)
projections_base <- arrange(projections_base, Year)
## convert to growth rates instead of absolute numbers
## keep the projections_base data since we will use it for areas for which we don't
## have spatial data
base <- projections_base[1,]
fuel_cost_growth_rates_base <- as.data.frame(t(apply(projections_base, 1, function(rowval) unlist(rowval / base))))
#### read in list of ASHP COPs
ASHP_COPs <- read.csv("ASHP random sample.csv")
ASHP_COPs <- select(ASHP_COPs, starts_with("cop"))
## Annual temperatures
## source: https://www.ncei.noaa.gov/access/search/data-search/normals-hourly-2006-2020
temperature_bin_hours_base <- read.csv("./NREL Data/typical meteorological year weather/temperature data by county.csv")
## indoor design temperature
#source: https://focusonenergy.com/sites/default/files/bpdeemedsavingsmanuav10_evaluationreport.pdf
indoor_design_temperature <- 65 #degrees Fahrenheit
## outdoor design temperature csv
#source: https://casetext.com/regulation/wisconsin-administrative-code/agency-department-of-safety-and-professional-services/safety-buildings-and-environment/commercial-building-code/chapter-sps-363-energy-conservation/subchapter-ii-changes-additions-or-omissions-to-the-international-energy-conservation-code-iecc/section-sps-3630302-exterior-design-conditions
outdoor_design_temperature_base <- read.csv("./Temperature Data/Outdoor design temps by county.csv")
### weights for calculating annual fuel costs
weights_base <- read.csv("./Temperature Data/HDD Proportions by Month by Climate Zone Using 2020 15 Year Normals.csv")
colnames(weights_base)[1] <- "Month"
## electricity
elec_cost_base <- read.csv("./final electricity data.csv")
# heating load
heating_load_base <- read.csv("./NREL data/heating and cooling load/heating load by county.csv")
# cooling kWh
cooling_kWh_base <- read.csv("./NREL data/heating and cooling load/cooling kWh by county.csv")
## not to keep
### installation sizing and efficiency
### TKTKTK
size <- 2
efficiency <- 16
ASHP_installment_file_base <- read.csv(paste0("./Installation costs/cost to install heat pump - ",size," ton ", efficiency, " SEER.csv"))
AC_installment_file_base <- read.csv(paste0("./Installation costs/cost to install AC - ",size," ton ", efficiency, " SEER.csv"))
NG_P_installment_file_base <- read.csv(paste0("./Installation costs/cost to install NG furnace - 70K BTU 92%+ efficiency.csv"))
HO_installment_file_base <- read.csv(paste0("./Installation costs/cost to install oil furnace - 70K BTU 85%+ efficiency.csv"))
###efficiency variables - note that efficiency is a unitless value
# this can be thought of as the average efficiency of whichever furnace across
# users in Wisconsin
naturalgas_furnace_efficiency <- .95
heatingoil_furnace_efficiency <- .9
propane_furnace_efficiency <- .9
### clean the spatial dataset and determine which electric utility's data to use
geo <- filter(geo, AnalysisArea > 0.5)
geo <- filter(geo, !is.na(FIPS))
geo <- filter(geo, !(FID_COOP_UTILITY_BOUNDARIES_COO == -1 & FID_WI_IOU_UTILITY_BOUNDARIES_W == -1 & FID_WI_MUNI_UTILITY_BOUNDARIES_ == -1))
## we assume that the hierarchy of electricity usage is municipality >> coop >> IOU
geo <- mutate(geo, elec_utility = ifelse(FID_WI_MUNI_UTILITY_BOUNDARIES_ != -1, PSC_ID,
ifelse(FID_COOP_UTILITY_BOUNDARIES_COO != -1,
PSC_ID_1, PSC_ID_12)))
county <- geo[k,]$FIPS
price_region <- geo[k,]$price_region
k <- 1
county <- geo[k,]$FIPS
price_region <- geo[k,]$price_region
elec_utility <- geo[k,]$elec_utility
#temperature bins
temperature_bin_hours <- filter(temperature_bin_hours_base, county == county)
temperature_bin_hours <- select(temperature_bin_hours, temperature)
temperature_bin_hours <- arrange(temperature_bin_hours, temperature)
#outdoor design temperature
outdoor_design_temperature <- filter(outdoor_design_temperature_base, county_fips == county)
outdoor_design_temperature <- outdoor_design_temperature$Outdoor.Design.Temp
# heating load
heating_load <- select(heating_load_base, contains(as.character(county)))
# cooling kWh
cooling_kWh <- select(cooling_kWh_base, contains(as.character(county)))
# electricity cost
elec_cost <- filter(elec_cost_base, Utility.ID == elec_utility)
### keeps track of monte carlo results
track_trials <- data.frame(n = c(1:n_trials), NG = 0, HO = 0, P = 0, ASHP_NG = 0,
ASHP_HO = 0, ASHP_P = 0)
#base cost variables
## randomly choose what energy projections to run based on one of 10 different
## scenarios that EIA provides, which determines the price of all fuels/
## electricity over time for a given trial. (all prices are in 2020 $s/MMBTU)
scenario <- floor(runif(1, min = 1, max = 11))
columns <- c(scenario + 1, scenario + 11, scenario + 21, scenario + 31)
projections <- projections_base[,columns]
fuel_cost_growth_rates <- fuel_cost_growth_rates_base[,columns]
