### The costs are split between nonlabor costs (materials) and labor costs since
### we assume that labor costs will covary.
### Note that, following the lead of the RMI's "The Economics of Electrifying
### Buildings" report (https://rmi.org/insight/the-economics-of-electrifying-buildings/)
### we set the costs of the natural gas furnaces and propane furnaces to be
### equal to each other.
### Also, ASHPs and ACs are sized at 2 tons (24K Btus/hour) and the efficiency
### is assumed to be an SEER of 16, while the furnaces which are required to
### meet load at much lower temperatures, are sized at 70K Btus/hour and are
### assumed to be efficient (homewyse essentially allows for an efficient or
### inefficient option for the furnaces).
ASHP_installment_file <- filter(ASHP_installment_file_base, price_region == price_region)[1,]
AC_installment_file <- filter(AC_installment_file_base, price_region == price_region)[1,]
NG_P_installment_file <- filter(NG_P_installment_file_base, price_region == price_region)[1,]
HO_installment_file <- filter(HO_installment_file_base, price_region == price_region)[1,]
# nonlabor cost of installing an ASHP in dollars per unit
ASHP_nonlabor_installment_cost <- runif(1, min = ASHP_installment_file$systemcost_low, max = ASHP_installment_file$systemcost_high)
# cost of installing a natural gas furnace in dollars per unit
naturalgas_furnace_nonlabor_installment_cost <- runif(1, min = NG_P_installment_file$systemcost_low, max = NG_P_installment_file$systemcost_high)
# cost of installing a heating oil furnace in dollars per unit
heatingoil_furnace_nonlabor_installment_cost <- runif(1, min = HO_installment_file$systemcost_low, max = HO_installment_file$systemcost_high)
# cost of installing a propane furnace in dollars per unit
propane_furnace_nonlabor_installment_cost <- naturalgas_furnace_nonlabor_installment_cost
# cost of installing air conditioning in dollars per unit
AC_nonlabor_installment_cost <- 0
if(cooling){AC_nonlabor_installment_cost <- runif(1, min = AC_installment_file$systemcost_low, max = AC_installment_file$systemcost_high)}
## labor costs - we assume these to covary perfectly
labor_costs <- runif(1,0,1)
# take the low labor cost and add the difference between high and low times our
# random value for how expensive labor is in the area that the heating tech is
# being installed in (labor_costs, above)
ASHP_labor_installment_cost <- ASHP_installment_file$laborcost_low + labor_costs*(ASHP_installment_file$laborcost_high - ASHP_installment_file$laborcost_low) #low = 1289, high = 1860
naturalgas_furnace_labor_installment_cost <- NG_P_installment_file$laborcost_low + labor_costs*(NG_P_installment_file$laborcost_high - NG_P_installment_file$laborcost_low) #low = 923, high = 1341
heatingoil_furnace_labor_installment_cost <- HO_installment_file$laborcost_low + labor_costs*(HO_installment_file$laborcost_high - HO_installment_file$laborcost_low) #low = 636, high = 810
propane_furnace_labor_installment_cost <- naturalgas_furnace_labor_installment_cost #low = 923, high = 1341
AC_labor_installment_cost <- 0
#if(cooling){AC_labor_installment_cost <- 2364 + labor_costs*867} #low = 2364, high = 3232
## after receiving feedback from PSC that questioned the Homewyse values, we chose
## to allow AC installment labor costs to equal ASHP installment costs.
if(cooling){AC_labor_installment_cost <- ASHP_labor_installment_cost} #low = 1289, high = 1860
### combine costs
ASHP_installment_cost <- ASHP_nonlabor_installment_cost + ASHP_labor_installment_cost
naturalgas_furnace_installment_cost <- naturalgas_furnace_nonlabor_installment_cost +
naturalgas_furnace_labor_installment_cost
heatingoil_furnace_installment_cost <- heatingoil_furnace_nonlabor_installment_cost +
heatingoil_furnace_labor_installment_cost
propane_furnace_installment_cost <- propane_furnace_nonlabor_installment_cost +
propane_furnace_labor_installment_cost
AC_installment_cost <- AC_nonlabor_installment_cost + AC_labor_installment_cost
# First simulate the efficiency of the "average" air source heat pump in the
# scenario.
# calculate the COP by weighting the COP within each temperature bin by
# how often the ASHP has to run while in that bin and how often that bin
# occurs
ASHP_NG_heating_ASHP_COP <- annual_COP(heat_COP_low, heat_COP_high,
heating_bin_hours, ASHP_NG_switchover, TRUE)
ASHP_HO_heating_ASHP_COP <- annual_COP(heat_COP_low, heat_COP_high,
heating_bin_hours, ASHP_HO_switchover, TRUE)
ASHP_P_heating_ASHP_COP <- annual_COP(heat_COP_low, heat_COP_high,
heating_bin_hours, ASHP_P_switchover, TRUE)
#### calculate input for all heating types + cooling
## cooling load is in kWh and is an average for the state
cooling_input <- 1011
# the rest are all in mmBTUs
ASHP_NG_input <- ASHP_NG_heating/ASHP_NG_heating_ASHP_COP
ASHP_HO_input <- ASHP_HO_heating/ASHP_HO_heating_ASHP_COP
ASHP_P_input <- ASHP_P_heating/ASHP_P_heating_ASHP_COP
backup_NG_input <- ASHP_NG_backup_heating/naturalgas_furnace_efficiency
backup_HO_input <- ASHP_HO_backup_heating/heatingoil_furnace_efficiency
backup_P_input <- ASHP_P_backup_heating/propane_furnace_efficiency
full_NG_input <- heating_load/naturalgas_furnace_efficiency
full_HO_input <- heating_load/heatingoil_furnace_efficiency
full_P_input <- heating_load/propane_furnace_efficiency
###other variables
social_cost_of_CO2 <- runif(1, min = 14, max = 51)/1000 #dollars per kg of CO2
###emissions variables (fuel data from https://www.epa.gov/sites/default/files/2021-04/documents/emission-factors_apr2021.pdf)
### WI grid specific electricity grid data is from https://www.epa.gov/sites/default/files/2021-02/documents/egrid2019_summary_tables.pdf
#CO2
## CO2 associated with electricity being used for heating in pounds of CO2/MWh
electricity_CO2 <- 1225.4
## CO2 from burning natural gas in a furnace in kg of CO2 per mmBTU
naturalgas_CO2 <- 53.06
## CO2 from burning heating oil (Distillate Fuel Oil No. 2) in a furnace in kg of CO2 per mmBTU
heatingoil_CO2 <- 73.96
## CO2 from burning propane in a furnace in kg of CO2 per mmBTU
propane_CO2 <- 62.87
#CH4
# CH4 associated with electricity being used for heating in lb of CH4/MWh
electricity_CH4 <- 0.113
# CH4 from burning natural gas in a furnace in kg of CH4 per mmBTU
naturalgas_CH4 <- 1/1000
# CH4 from burning heating oil (Distillate Fuel Oil No. 2) in a furnace in kg of CH4 per mmBTU
heatingoil_CH4 <- 3/1000
# CH4 from burning propane in a furnace in kg of CH4 per mmBTU
propane_CH4 <- 3/1000
#N2O
# N2O associated with electricity being used for heating in pounds of N2O/MWh
electricity_N2O <- 0.016
# N2O from burning natural gas in a furnace in kg of N2O per mmBTU
naturalgas_N2O <- 0.1/1000
# N2O from burning heating oil (Distillate Fuel Oil No. 2) in a furnace in kg of N2O per mmBTU
heatingoil_N2O <- 0.6/1000
# N2O from burning propane in a furnace in kg of N2O per mmBTU
propane_N2O <- 0.6/1000
### decarbonization rate of the grid
#2019 is the year from which our grid emissions values come from
decarb <- 1/(decarb_year - 2019)
##### we assume that methane leakage per production rates will remain constant
##### over time. We also assume that all fuel burned whether for heating or
##### electricity production is from the U.S. and not imported.
## account for methane leakage in the natural gas and oil production cycle
# estimated amount of produced methane that leaks during the natural gas production cycle
# source: https://www-science-org.ezproxy.library.wisc.edu/doi/10.1126/science.aar7204
# the paper provides 95% confidence interval of 2 to 2.7 with a mean of 2.3. They don't
# give any information on the distribution used and it is clearly not symmetric, but
# our best estimation is a normal distribution. The code below essentially splits the
# difference and finds the standard deviation of a normal distribution with a mean of
# 2.3 and a low of 1.95 and high of 2.65.
sd <- (abs((2 - 2.3)/1.96) + abs((2.7 - 2.3)/1.96))/2
NG_and_Petroleum_methane_leakage_rate <- rnorm(1, 2.3, sd)/100
## energy to volume
mmBTU_per_cubic_ft_NG <- 0.001026 #source: https://www.epa.gov/sites/default/files/2021-04/documents/emission-factors_apr2021.pdf
mmBTU_per_gallon_HO <- 0.138 #source: https://www.epa.gov/sites/default/files/2021-04/documents/emission-factors_apr2021.pdf
mmBTU_per_gallon_P <- 0.091 #source: https://www.epa.gov/sites/default/files/2021-04/documents/emission-factors_apr2021.pdf
## volume to weight - if not specified, source: https://cngcenter.com/wp-content/uploads/2013/09/UnitsAndConversions.pdf
NG_density <- 0.717 #kg/m^3
m3_to_ft3 <- 35.3 #ft^3/m^3
cubic_ft_NG_to_kg <- NG_density/m3_to_ft3 #kg/ft^3
HO_density <- 0.87 #kg/L source: https://henrycounty.in.gov/DocumentCenter/View/318/Fuel-Oil-Number-2-PDF
liter_to_gallon <- 0.26 #gal/L
gallon_HO_to_kg <- HO_density/liter_to_gallon
P_density <- 0.495 #kg/L @ 25 degrees Celcius, source: https://www.engineeringtoolbox.com/specific-gravity-liquids-d_336.html
gallon_P_to_kg <- P_density/liter_to_gallon #kg/gallon, source: https://henrycounty.in.gov/DocumentCenter/View/318/Fuel-Oil-Number-2-PDF
full_NG_methane_leak_CO2e <- methane_leak(full_NG_input, NG_and_Petroleum_methane_leakage_rate,
mmBTU_per_cubic_ft_NG, cubic_ft_NG_to_kg)
full_HO_methane_leak_CO2e <- methane_leak(full_HO_input, NG_and_Petroleum_methane_leakage_rate,
mmBTU_per_gallon_HO, gallon_HO_to_kg)
full_P_methane_leak_CO2e <- methane_leak(full_P_input, NG_and_Petroleum_methane_leakage_rate,
mmBTU_per_gallon_P, gallon_P_to_kg)
backup_NG_methane_leak_CO2e <- methane_leak(backup_NG_input, NG_and_Petroleum_methane_leakage_rate,
mmBTU_per_cubic_ft_NG, cubic_ft_NG_to_kg)
backup_HO_methane_leak_CO2e <- methane_leak(backup_HO_input, NG_and_Petroleum_methane_leakage_rate,
mmBTU_per_gallon_HO, gallon_HO_to_kg)
backup_P_methane_leak_CO2e <- methane_leak(backup_P_input, NG_and_Petroleum_methane_leakage_rate,
mmBTU_per_gallon_P, gallon_P_to_kg)
### account for life-cycle emissions with regard to electricity production
# source: https://www.epa.gov/sites/default/files/2021-02/documents/egrid2019_summary_tables.pdf
# static (we assume these don't change over the course of the simulation)
proportion_electricity_from_oil <- 0.002
proportion_electricity_from_NG <- 0.328
proportion_electricity_from_nuclear <- 0.162
proportion_electricity_from_hydro <- 0.043
proportion_electricity_from_biomass <- 0.022
# we assume that all improvements to the grid during the simulation comes
# from the removal of coal from the grid and that it will be replaced with an
# equal proportion of solar and wind
proportion_electricity_from_coal <- 0.413
proportion_electricity_from_wind <- 0.03
proportion_electricity_from_solar <- 0.001
# the above figures are from 2019, so we update them to 2020 numbers so that
# they can be used in the iterative year for-loop below.
# The 1.25 (1/.8) reflects the fact that coal is removed from the grid at a rate
# faster than the grid reaches 0 emissions (e.g. in our aggressive case, all coal
# is removed by 2035, but the grid still has 20% of it's original emissions)
drop_in_coal <- proportion_electricity_from_coal*(decarb*1.25)
proportion_electricity_from_coal <- proportion_electricity_from_coal - drop_in_coal
proportion_electricity_from_wind <- proportion_electricity_from_wind + drop_in_coal/2
proportion_electricity_from_solar <- proportion_electricity_from_solar + drop_in_coal/2
# lifecycle emission rates - not including combustion emissions, where applicable,
# since those are accounted for elsewhere
# source: https://www.nrel.gov/docs/fy21osti/80580.pdf
# all numbers are in kg CO2e/kWh
biomass_lifecycle <- 52/1000
photovoltaic_lifecycle <- 43/1000
hydro_lifecycle <- 21/1000
wind_lifecycle <- 13/1000
nuclear_lifecycle <- 13/1000
NG_lifecycle <- (0.8+71+0.02)/1000
#the literature lacks necessary details to come up with a non-combustion
#life-cycle figure for oil, but the literature often applies the same value to
#oil production emissions as to NG production emissions, so we do the same here
#with NG
oil_lifecycle <- NG_lifecycle
coal_lifecycle <- (5 + 10 + 5)/1000 # we assume that <5 is equal to 5
## create dataset to track the 15 year simulation for this trial
track_years <- data.frame(n = c(0:years_of_analysis), NG = 0, HO = 0, P = 0,
ASHP_NG = 0, ASHP_HO = 0, ASHP_P = 0, NG_private = 0,
NG_emissions = 0, HO_private = 0, HO_emissions = 0,
P_private = 0, P_emissions = 0, ASHP_NG_private = 0,
ASHP_NG_emissions = 0, ASHP_HO_private = 0,
ASHP_HO_emissions = 0, ASHP_P_private = 0,
ASHP_P_emissions = 0)
#### input year 0 costs (i.e. installation costs)
track_years[track_years$n == 0,"NG"] <- naturalgas_furnace_installment_cost
track_years[track_years$n == 0,"HO"] <- heatingoil_furnace_installment_cost
track_years[track_years$n == 0,"P"] <- propane_furnace_installment_cost
### if an ASHP is being installed we add the cost of an ASHP
## otherwise we add the cost of air conditioning (but the cost = 0 if we are
## not considering cooling i.e. cooling == FALSE)
track_years[track_years$n == 0,"ASHP_NG"] <- track_years[track_years$n == 0,"NG"] +
ASHP_installment_cost
track_years[track_years$n == 0,"ASHP_HO"] <- track_years[track_years$n == 0,"HO"] +
ASHP_installment_cost
track_years[track_years$n == 0,"ASHP_P"] <- track_years[track_years$n == 0,"P"] +
ASHP_installment_cost
track_years[track_years$n == 0,"NG"] <- track_years[track_years$n == 0,"NG"] +
AC_installment_cost
track_years[track_years$n == 0,"HO"] <- track_years[track_years$n == 0,"HO"] +
AC_installment_cost
track_years[track_years$n == 0,"P"] <- track_years[track_years$n == 0,"P"] +
AC_installment_cost
#### start simulation of annual costs ####
for(j in 1:years_of_analysis){
###cost variables
#fuel cost in 2020 $/mmBTU from EIA projections for year j
electricity_price <- electricity_heating_cost*fuel_cost_growth_rates[j, which(str_detect(colnames(fuel_cost_growth_rates), "Electricity"))]
naturalgas_price <- projections[j, which(str_detect(colnames(fuel_cost_growth_rates), "Gas"))]
heatingoil_price <- projections[j, which(str_detect(colnames(projections), "Oil"))]
propane_price <- projections[j, which(str_detect(colnames(projections), "Propane"))]
### emissions variables
# accounts for the fact that the grid gets cleaner every year at a linear rate
electricity_CO2_use <- electricity_CO2*(1-decarb*(j+1))
electricity_CH4_use <- electricity_CH4*(1-decarb*(j+1))
electricity_N2O_use <- electricity_N2O*(1-decarb*(j+1))
### lifecycle calculations
proportion_electricity_from_coal <- proportion_electricity_from_coal - drop_in_coal
proportion_electricity_from_wind <- proportion_electricity_from_wind + drop_in_coal/2
proportion_electricity_from_solar <- proportion_electricity_from_solar + drop_in_coal/2
### lifecycle emissions for electricity (not including combustion below)
# kg of CO2e per kWh of electricity
electricity_lifecycle <- biomass_lifecycle*proportion_electricity_from_biomass +
photovoltaic_lifecycle*proportion_electricity_from_solar +
hydro_lifecycle*proportion_electricity_from_hydro +
wind_lifecycle*proportion_electricity_from_wind +
nuclear_lifecycle*proportion_electricity_from_nuclear +
NG_lifecycle*proportion_electricity_from_NG +
oil_lifecycle*proportion_electricity_from_oil +
coal_lifecycle*proportion_electricity_from_coal
# convert to kg of CO2e per mmBTU to add to the combustion value below
mmBTU_per_kWh <- 3412/1000000 #source: https://www.eia.gov/energyexplained/units-and-calculators/
electricity_lifecycle <- electricity_lifecycle*mmBTU_per_kWh
################# convert variables to standard units ###################
##carbon dioxide equivalents of emissions in kg per mmBTU
#electricity
lb_to_kg <- .45359237 #source: https://www.metric-conversions.org/weight/pounds-to-kilograms.htm
electricity_CO2e <- (electricity_CO2_use*GWP_CO2 + electricity_CH4_use*GWP_CH4 +
electricity_N2O_use*GWP_N2O)*lb_to_kg/(mmBTU_per_kWh*1000) +
electricity_lifecycle
#nat gas
## multiply each emission by the emissions global warming potential and add to get CO2 equivalents
naturalgas_CO2e <- naturalgas_CO2*GWP_CO2 + naturalgas_CH4*GWP_CH4 + naturalgas_N2O*GWP_N2O
#heating oil
heatingoil_CO2e <- heatingoil_CO2*GWP_CO2 + heatingoil_CH4*GWP_CH4 + heatingoil_N2O*GWP_N2O
#propane
propane_CO2e <- propane_CO2*GWP_CO2 + propane_CH4*GWP_CH4 + propane_N2O*GWP_N2O
############### end of conversions ########################################
################# Calculations section ###############
####Calculate heating costs for all heating types
cooling_fuel_cost <- cooling_input*mmBTU_per_kWh*electricity_price
ASHP_NG_fuel_cost <- ASHP_NG_input*electricity_price + cooling_fuel_cost
ASHP_HO_fuel_cost <- ASHP_HO_input*electricity_price + cooling_fuel_cost
ASHP_P_fuel_cost <- ASHP_P_input*electricity_price + cooling_fuel_cost
backup_naturalgas_fuel_cost <-  backup_NG_input*naturalgas_price
backup_heatingoil_fuel_cost <- backup_HO_input*heatingoil_price
backup_propane_fuel_cost <- backup_P_input*propane_price
full_naturalgas_fuel_cost <- full_NG_input*naturalgas_price
full_heatingoil_fuel_cost <- full_HO_input*heatingoil_price
full_propane_fuel_cost <- full_P_input*propane_price
if(cooling){
full_naturalgas_fuel_cost <- full_naturalgas_fuel_cost + cooling_fuel_cost
full_heatingoil_fuel_cost <- full_heatingoil_fuel_cost + cooling_fuel_cost
full_propane_fuel_cost <- full_propane_fuel_cost + cooling_fuel_cost
}
# all electric emissions account for line loss, the % of electricity lost
# from production to end-source. Since producers account for line-loss in their
# production output (e.g. if they expect a demand of 1 kWh they know to produce
# 1 * (1 + lineloss) kWh of electricity) the end user who demanded that electricity
# is responsible for the line loss as well.
line_loss <- 0.05
#### Calculate emissions for all heating types and monetize with social carbon costs
cooling_emissions_cost <- (cooling_input*mmBTU_per_kWh*electricity_CO2e)*
(1+line_loss)*social_cost_of_CO2
ASHP_NG_emissions_cost <- (ASHP_NG_input*electricity_CO2e)*(1+line_loss)*
social_cost_of_CO2 + cooling_emissions_cost
ASHP_HO_emissions_cost <- (ASHP_HO_input*electricity_CO2e)*(1+line_loss)*
social_cost_of_CO2 + cooling_emissions_cost
ASHP_P_emissions_cost <- (ASHP_P_input*electricity_CO2e)*(1+line_loss)*
social_cost_of_CO2 + cooling_emissions_cost
backup_naturalgas_emissions_cost <- (backup_NG_input*naturalgas_CO2e +
backup_NG_methane_leak_CO2e)*social_cost_of_CO2
backup_heatingoil_emissions_cost <- (backup_HO_input*heatingoil_CO2e +
backup_HO_methane_leak_CO2e)*social_cost_of_CO2
backup_propane_emissions_cost <- (backup_P_input*propane_CO2e +
backup_P_methane_leak_CO2e)*social_cost_of_CO2
full_natgas_emissions_cost <- (full_NG_input*naturalgas_CO2e +
full_NG_methane_leak_CO2e)*social_cost_of_CO2
full_heatingoil_emissions_cost <- (full_HO_input*heatingoil_CO2e +
full_HO_methane_leak_CO2e)*social_cost_of_CO2
full_propane_emissions_cost <- (full_P_input*propane_CO2e +
full_P_methane_leak_CO2e)*social_cost_of_CO2
if(cooling){
full_natgas_emissions_cost <- full_natgas_emissions_cost +
cooling_emissions_cost
full_heatingoil_emissions_cost <- full_heatingoil_emissions_cost +
cooling_emissions_cost
full_propane_emissions_cost <- full_propane_emissions_cost +
cooling_emissions_cost
}
################### End of "calculation section" ################
######################## NPV ####################################
## calculate this years costs
NG <- full_natgas_emissions_cost + full_naturalgas_fuel_cost
HO <- full_heatingoil_emissions_cost + full_heatingoil_fuel_cost
P <- full_propane_emissions_cost + full_propane_fuel_cost
ASHP_NG <- ASHP_NG_fuel_cost + ASHP_NG_emissions_cost +
backup_naturalgas_emissions_cost + backup_naturalgas_fuel_cost
ASHP_HO <- ASHP_HO_fuel_cost + ASHP_HO_emissions_cost +
backup_heatingoil_emissions_cost + backup_heatingoil_fuel_cost
ASHP_P <- ASHP_P_fuel_cost + ASHP_P_emissions_cost +
backup_propane_emissions_cost + backup_propane_fuel_cost
track_years[track_years$n == j, "NG_private"] <-
full_naturalgas_fuel_cost/(1+discount_rate)^j
track_years[track_years$n == j, "HO_private"] <-
full_heatingoil_fuel_cost/(1+discount_rate)^j
track_years[track_years$n == j, "P_private"] <-
full_propane_fuel_cost/(1+discount_rate)^j
track_years[track_years$n == j, "NG_emissions"] <-
full_natgas_emissions_cost/(1+discount_rate)^j
track_years[track_years$n == j, "HO_emissions"] <-
full_heatingoil_emissions_cost/(1+discount_rate)^j
track_years[track_years$n == j, "P_emissions"] <-
full_propane_emissions_cost/(1+discount_rate)^j
track_years[track_years$n == j, "ASHP_NG_private"] <-
(ASHP_NG_fuel_cost + backup_naturalgas_fuel_cost)/(1+discount_rate)^j
track_years[track_years$n == j, "ASHP_HO_private"] <-
(ASHP_HO_fuel_cost + backup_heatingoil_fuel_cost)/(1+discount_rate)^j
track_years[track_years$n == j, "ASHP_P_private"] <-
(ASHP_P_fuel_cost + backup_propane_fuel_cost)/(1+discount_rate)^j
track_years[track_years$n == j, "ASHP_NG_emissions"] <-
(ASHP_NG_emissions_cost + backup_naturalgas_emissions_cost)/(1+discount_rate)^j
track_years[track_years$n == j, "ASHP_HO_emissions"] <-
(ASHP_HO_emissions_cost + backup_heatingoil_emissions_cost)/(1+discount_rate)^j
track_years[track_years$n == j, "ASHP_P_emissions"] <-
(ASHP_P_emissions_cost + backup_propane_emissions_cost)/(1+discount_rate)^j
## discount the annual costs to derive the NPV
track_years[track_years$n == j, "NG"] <- NG/(1+discount_rate)^j
track_years[track_years$n == j, "HO"] <- HO/(1+discount_rate)^j
track_years[track_years$n == j, "P"] <- P/(1+discount_rate)^j
track_years[track_years$n == j, "ASHP_NG"] <- ASHP_NG/(1+discount_rate)^j
track_years[track_years$n == j, "ASHP_HO"] <- ASHP_HO/(1+discount_rate)^j
track_years[track_years$n == j, "ASHP_P"] <- ASHP_P/(1+discount_rate)^j
######################### end of "NPV" section ####################
}
## at the end of the 15 years, we then take the sum of the annual NPVs to find
## the total NPV
track_trials[i, "NG"] <- sum(track_years$NG)
track_trials[i, "HO"] <- sum(track_years$HO)
track_trials[i, "P"] <- sum(track_years$P)
track_trials[i, "ASHP_NG"] <- sum(track_years$ASHP_NG)
track_trials[i, "ASHP_HO"] <- sum(track_years$ASHP_HO)
track_trials[i, "ASHP_P"] <- sum(track_years$ASHP_P)
# keep track of individual years to allow for an average annual net benfits
# calculation
# track_years$trial <- i
# track_years_total <- rbind(track_years_total, track_years)
# keep track of installation, emissions, and private costs, separately to
# create a graph later on for each ASHP scenario
# track_emissions_and_private[i, "NG_install"] <- track_years[1,"NG"]
# track_emissions_and_private[i, "HO_install"] <- track_years[1,"HO"]
# track_emissions_and_private[i, "P_install"] <- track_years[1,"P"]
# track_emissions_and_private[i, "ASHP_NG_install"] <- track_years[1,"ASHP_NG"]
# track_emissions_and_private[i, "ASHP_HO_install"] <- track_years[1,"ASHP_HO"]
# track_emissions_and_private[i, "ASHP_P_install"] <- track_years[1,"ASHP_P"]
# track_emissions_and_private[i, "NG_private"] <- sum(track_years$NG_private)
# track_emissions_and_private[i, "HO_private"] <- sum(track_years$HO_private)
# track_emissions_and_private[i, "P_private"] <- sum(track_years$P_private)
# track_emissions_and_private[i, "ASHP_NG_private"] <-
#   sum(track_years$ASHP_NG_private)
# track_emissions_and_private[i, "ASHP_HO_private"] <-
#   sum(track_years$ASHP_HO_private)
# track_emissions_and_private[i, "ASHP_P_private"] <-
#   sum(track_years$ASHP_P_private)
# track_emissions_and_private[i, "NG_emissions"] <- sum(track_years$NG_emissions)
# track_emissions_and_private[i, "HO_emissions"] <- sum(track_years$HO_emissions)
# track_emissions_and_private[i, "P_emissions"] <- sum(track_years$P_emissions)
# track_emissions_and_private[i, "ASHP_NG_emissions"] <-
#   sum(track_years$ASHP_NG_emissions)
# track_emissions_and_private[i, "ASHP_HO_emissions"] <-
#   sum(track_years$ASHP_HO_emissions)
# track_emissions_and_private[i, "ASHP_P_emissions"] <-
#   sum(track_years$ASHP_P_emissions)
if(i%%100 == 0) print(paste0("trial: ", i))
}
track_trials$NG_dif <- track_trials$NG - track_trials$ASHP_NG
track_trials$HO_dif <- track_trials$HO - track_trials$ASHP_HO
track_trials$P_dif <- track_trials$P - track_trials$ASHP_P
geo[k,]$mean_NG <- mean(track_trials$NG_dif)
geo[k,]$mean_HO <- mean(track_trials$HO_dif)
geo[k,]$mean_P <- mean(track_trials$P_dif)
geo[k,]$perc_NG <- mean(track_trials$NG_dif > 0)
geo[k,]$perc_HO <- mean(track_trials$HO_dif > 0)
geo[k,]$perc_P <- mean(track_trials$P_dif > 0)
k <- 1
county <- geo[k,]$FIPS
price_region <- geo[k,]$price_region
elec_utility <- geo[k,]$elec_utility
## climate zones
climate_zone <- filter(climate_zone_base, county_fips == county)
climate_zone <- climate_zone$Zone
#temperature bins
temperature_bin_hours <- filter(temperature_bin_hours_base, zone == climate_zone)
temperature_bin_hours <- select(temperature_bin_hours, HLY.TEMP.NORMAL)
temperature_bin_hours <- arrange(temperature_bin_hours, HLY.TEMP.NORMAL)
#outdoor design temperature
outdoor_design_temperature <- filter(outdoor_design_temperature_base, county_fips == county)
outdoor_design_temperature <- outdoor_design_temperature$Outdoor.Design.Temp
# heating load
heating_load <- select(heating_load_base, contains(as.character(county)))
heating_load <- sum(heating_load[,1])
# electricity cost
elec_cost <- filter(elec_cost_base, Utility.ID == elec_utility)
weights <- filter(weights_base, zone == climate_zone)
elec_cost <- left_join(elec_cost, weights, by = "Month")
electricity_heating_cost <- sum(elec_cost$proportion*elec_cost$Rate)
#convert from $/kWh to $/mmBTU
electricity_heating_cost <- electricity_heating_cost/3412*10^6
### keeps track of monte carlo results
track_trials <- data.frame(n = c(1:n_trials), NG = 0, HO = 0, P = 0, ASHP_NG = 0,
ASHP_HO = 0, ASHP_P = 0)
i <- 1
k <- 2
county <- geo[k,]$FIPS
price_region <- geo[k,]$price_region
elec_utility <- geo[k,]$elec_utility
## climate zones
climate_zone <- filter(climate_zone_base, county_fips == county)
climate_zone <- climate_zone$Zone
#temperature bins
temperature_bin_hours <- filter(temperature_bin_hours_base, zone == climate_zone)
temperature_bin_hours <- select(temperature_bin_hours, HLY.TEMP.NORMAL)
temperature_bin_hours <- arrange(temperature_bin_hours, HLY.TEMP.NORMAL)
#outdoor design temperature
outdoor_design_temperature <- filter(outdoor_design_temperature_base, county_fips == county)
outdoor_design_temperature <- outdoor_design_temperature$Outdoor.Design.Temp
# heating load
heating_load <- select(heating_load_base, contains(as.character(county)))
heating_load <- sum(heating_load[,1])
# electricity cost
elec_cost <- filter(elec_cost_base, Utility.ID == elec_utility)
weights <- filter(weights_base, zone == climate_zone)
elec_cost <- left_join(elec_cost, weights, by = "Month")
electricity_heating_cost <- sum(elec_cost$proportion*elec_cost$Rate)
#convert from $/kWh to $/mmBTU
electricity_heating_cost <- electricity_heating_cost/3412*10^6
### keeps track of monte carlo results
track_trials <- data.frame(n = c(1:n_trials), NG = 0, HO = 0, P = 0, ASHP_NG = 0,
ASHP_HO = 0, ASHP_P = 0)
i <- 1
#base cost variables
## randomly choose what energy projections to run based on one of 10 different
## scenarios that EIA provides, which determines the price of all fuels/
## electricity over time for a given trial. (all prices are in 2020 $s/MMBTU)
scenario <- floor(runif(1, min = 1, max = 11))
columns <- c(scenario + 1, scenario + 11, scenario + 21, scenario + 31)
projections <- projections_base[,columns]
fuel_cost_growth_rates <- fuel_cost_growth_rates_base[,columns]
## heating variables
#### calculate the proportion of heating load that the backup heating system
#### covers based on the switchover temperature
## Switch over temperature (above the switchover, the ASHP heats, below, the backup heats)
### Switch over temperature is determined by the relative prices of electricity and each
### respective fuel at year 1.
### we start with a COP value that is then translated into a temperature later with the use
### of the COP function
ASHP_NG_switchover_COP <- electricity_heating_cost*
(naturalgas_furnace_efficiency/
projections[1,which(str_detect(colnames(projections), "Natural.Gas"))])
ASHP_HO_switchover_COP <- electricity_heating_cost*
(heatingoil_furnace_efficiency/
projections[1,which(str_detect(colnames(projections), "Distillate.Fuel.Oil"))])
ASHP_P_switchover_COP <- electricity_heating_cost*
(propane_furnace_efficiency/
projections[1,which(str_detect(colnames(projections), "Propane"))])
#### generate heating COP values to translate switchover COP to a temperature
### COP values were found by taking a random sample of 10 ASHPs from the NEEP
### ASHP list with an SEER of 16 and a max heating capacity at 5 degrees of
### between 20000 and 40000 btu/hr. The below numbers are one standard deviation
### above and below the mean value found at both temperatures.
ASHP_num <- floor(runif(1, min = 1, max = (nrow(ASHP_COPs) + 1)))
heat_COP_low <- ASHP_COPs[ASHP_num,"cop.at.5"]
heat_COP_high <- ASHP_COPs[ASHP_num,"cop.at.47"]
### translate the COP to a temperature value: switchover_COP = COP_low + COP_slope*x, find x
#the 42 comes from the difference between 47 degrees and 5 degrees, the two
#temperatures at which we get COP values
COP_slope <- (heat_COP_high - heat_COP_low)/42
#the five comes from the fact that heat_COP_low is measured at 5 degrees
ASHP_NG_switchover <- ((ASHP_NG_switchover_COP - heat_COP_low)/COP_slope) + 5
ASHP_HO_switchover <- ((ASHP_HO_switchover_COP - heat_COP_low)/COP_slope) + 5
ASHP_P_switchover <- ((ASHP_P_switchover_COP - heat_COP_low)/COP_slope) + 5
## proportion of heating load covered by backup - different for each fuel
## because of different switchovers first adjust the temperature_heating_bin
## data to account for heating load at each temperature bin
heating_bin_hours <- heatingbin_adjust(indoor_design_temperature,
outdoor_design_temperature, temperature_bin_hours)
#next determine the proportion of heating provided by backup for each fuel
ASHP_NG_backup_heating <- backupheatingload(heating_bin_hours, ASHP_NG_switchover)
ASHP_HO_backup_heating <- backupheatingload(heating_bin_hours, ASHP_HO_switchover)
ASHP_P_backup_heating <- backupheatingload(heating_bin_hours, ASHP_P_switchover)
heating_load
View(heating_bin_hours)
census <- read.csv("county fuel type data.csv")
census <- read.csv("county fuel type data.csv")
