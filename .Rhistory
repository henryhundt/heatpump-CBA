## of the proportion of the annual heating load that comes in each temperature
## bin
temperature_bin_hours$load_proportion <- 0
## we model the design heating load as a linear model y = mx + b, where y is the
## design heating load, b is the design heating load in btu/hr at the design
## heating temperature and y = 0 @ the indoor design temperature.
## We can find the design heating load at each temperature given in terms of
## the design heating load variable "b" and then the sum of all of those values should
## equal the annual heating load of the house.
# we proceed by solving the equation:
#"annual_heating_load_in_a_temp_bin = sum of design_heating_load_in_each_temp_hour
# where design_heating_load_in_each_temp_hour = y = mx+b
## One key to this equation is that at the indoor design temp, the design heating load = 0,
## therefore, 0 = m(temperature_distance)+b and we find that m = -b/temperature_distance.
## plugging this back into the design_heating_load_in_each_temp_hour equation
## and we get y = -bx/temperature_distance + b.
## Therefore, the result that we find in the "load_proportion" variable is simply the constant on b
## in the above equation, i.e. (temperature_distance - x)/temperature_distance
temperature_bin_hours$distance <- temperature_bin_hours$temperature - outdoor_design_temperature
temperature_bin_hours$load_proportion <- (temperature_distance-temperature_bin_hours$distance)/temperature_distance
## heating technology is generally not installed to function at below the outdoor design temp
## so when such temperatures do occur, the technology can at best run at 100% capacity. As such
## we set their proportion of the design heating load to 1
temperature_bin_hours <- mutate(temperature_bin_hours, load_proportion =
ifelse(load_proportion > 1, 1, load_proportion))
return(temperature_bin_hours)
}
## calculate the proportion of heating that is covered by the backup system
## given a switchover temperature
backupheatingload <- function(heating_bin_hours, switchover_temp){
backup <- filter(heating_bin_hours, temperature < switchover_temp)
total_prop <- sum(heating_bin_hours$load_proportion)
backup_prop <- sum(backup$load_proportion)
return(heating_load*backup_prop/total_prop)
}
# calculate the average COP of the ASHP for cooling and for heating
# for heating, it uses COP values at 5 and 65 degrees Fahrenheit
# for cooling, it uses COP values at
annual_COP <- function(COP_low, COP_high, temperature_bin_hours,
switchover_temp, heating_yes){
## for heating, remove temperature bin data covered by backup heating
if(heating_yes){
if(switchover_temp >= 65) return(1)
temperature_bin_hours <- filter(temperature_bin_hours, HLY.TEMP.NORMAL > switchover_temp)
}
#calculate the slope of the COP at which COP changes with temperature
## we assume that COP changes linearly (while fundamentally untrue, we believe
## this is a reasonable assumption at the temperatures we're looking at)
###42 is the distance between 47 and 5, the two temperatures at which we get heating COPs
###13 is the distance between 95 and 82, the temperatures at which we get cooling COPs
if(heating_yes) {COP_slope <- abs(COP_high-COP_low)/42
}else{COP_slope <- abs(COP_high - COP_low)/13}
# create some variables to calculate COP for the different temperature bins
temperature_bin_hours$COP <- 0
## set COP_high to be the COP at 65 degrees
if(heating_yes){
COP_high <- COP_high + COP_slope*(65-47)
temperature_bin_hours$COP <- COP_high - COP_slope*(65-temperature_bin_hours$HLY.TEMP.NORMAL)
} else{
COP_high <- COP_high + COP_slope*(82-65)
TKTK
}
# working off of the strategy used to calculate backup heating load, we now
# come up with weights for the different COP values. For example, if the COP
# at 35 degrees is 3.4, that should be weighted by the amount of heating
# the ASHP needs to provide during that temperature bin. We've already calculated
# this value in the backup heating function and it is the constant that is multiplied
# with b to find the design heating temp y.
total_load <- sum(temperature_bin_hours$load_proportion)
temperature_bin_hours$COP.Weight <- temperature_bin_hours$load_proportion/total_load
return(sum(temperature_bin_hours$COP.Weight*temperature_bin_hours$COP))
}
methane_leak <- function(input, methane_leakage_rate, energy_rate, density){
# convert the fuel/electricity input from mmBTUs to volume
## for electricity it's volume of fuel needed to create the electricity
input_volume <- input/energy_rate
# convert from volume to kilograms
input_weight <- input_volume*density
# use the leakage rate, which is as a proportion of produced fuel,
# to implied kg of methane
methane_leaked <- input_weight*methane_leakage_rate
# return the CO2e of the leaked methane
return(methane_leaked*GWP_CH4)
}
#################### set key variables #####################
##### constants #####
#100-year global warming potential
#"Gases are converted to CO2e by multiplying by their global warming potential (GWP)"
GWP_CO2 <- 1
GWP_CH4 <- 28
GWP_N2O <- 265
#### monte carlo variables
set.seed(1111)
n_trials <- 1000
years_of_analysis <- 15 ### 2021-2035
#set working directory
rm(list = ls())
setwd("~/Documents/GitHub/heatpump-CBA")
# read in necessary libraries
### if not downloaded on your computer, first run the install.packages
### commands that have been commented out
#install.packages("stringr")
#install.packages("dplyr")
#install.packages("purrr")
#install.packages("readxl")
#install.packages("lubridate")
library(stringr)
library(dplyr)
library(purrr)
library(readxl)
library(lubridate)
################### set functions ########################################
############### functions to be used for calculations #####################
## calculate proportion of a year's heating that comes in each temperature bin
heatingbin_adjust <- function(indoor_design_temperature, outdoor_design_temperature,
temperature_bin_hours){
## reduce the temperature bin hours dataset to just the temperature bins that
## we will consider for our calculations
temperature_bin_hours <- filter(temperature_bin_hours, temperature < indoor_design_temperature)
## calculates the distance between outdoor design temp and when design
## heating load reaches 0 (aka indoor design temperature), also could be thought
##of as the distance of the x-axis in a design heating load graph
temperature_distance <- indoor_design_temperature - outdoor_design_temperature
## We now assume that the design heating load (measured in btu/hour) falls
## linearly with temperature until it reaches 0 at the indoor temperature.
## Knowing the hours in the year in different temperature bins and the final
## average annual heating load of a house in WI, we can back out a calculation
## of the proportion of the annual heating load that comes in each temperature
## bin
temperature_bin_hours$load_proportion <- 0
## we model the design heating load as a linear model y = mx + b, where y is the
## design heating load, b is the design heating load in btu/hr at the design
## heating temperature and y = 0 @ the indoor design temperature.
## We can find the design heating load at each temperature given in terms of
## the design heating load variable "b" and then the sum of all of those values should
## equal the annual heating load of the house.
# we proceed by solving the equation:
#"annual_heating_load_in_a_temp_bin = sum of design_heating_load_in_each_temp_hour
# where design_heating_load_in_each_temp_hour = y = mx+b
## One key to this equation is that at the indoor design temp, the design heating load = 0,
## therefore, 0 = m(temperature_distance)+b and we find that m = -b/temperature_distance.
## plugging this back into the design_heating_load_in_each_temp_hour equation
## and we get y = -bx/temperature_distance + b.
## Therefore, the result that we find in the "load_proportion" variable is simply the constant on b
## in the above equation, i.e. (temperature_distance - x)/temperature_distance
temperature_bin_hours$distance <- temperature_bin_hours$temperature - outdoor_design_temperature
temperature_bin_hours$load_proportion <- (temperature_distance-temperature_bin_hours$distance)/temperature_distance
## heating technology is generally not installed to function at below the outdoor design temp
## so when such temperatures do occur, the technology can at best run at 100% capacity. As such
## we set their proportion of the design heating load to 1
temperature_bin_hours <- mutate(temperature_bin_hours, load_proportion =
ifelse(load_proportion > 1, 1, load_proportion))
return(temperature_bin_hours)
}
## calculate the proportion of heating that is covered by the backup system
## given a switchover temperature
backupheatingload <- function(heating_bin_hours, switchover_temp){
backup <- filter(heating_bin_hours, temperature < switchover_temp)
total_prop <- sum(heating_bin_hours$load_proportion)
backup_prop <- sum(backup$load_proportion)
return(heating_load*backup_prop/total_prop)
}
# calculate the average COP of the ASHP for cooling and for heating
# for heating, it uses COP values at 5 and 65 degrees Fahrenheit
# for cooling, it uses COP values at
annual_COP <- function(COP_low, COP_high, temperature_bin_hours,
switchover_temp, heating_yes){
## for heating, remove temperature bin data covered by backup heating
if(heating_yes){
if(switchover_temp >= 65) return(1)
temperature_bin_hours <- filter(temperature_bin_hours, HLY.TEMP.NORMAL > switchover_temp)
}
#calculate the slope of the COP at which COP changes with temperature
## we assume that COP changes linearly (while fundamentally untrue, we believe
## this is a reasonable assumption at the temperatures we're looking at)
###42 is the distance between 47 and 5, the two temperatures at which we get heating COPs
###13 is the distance between 95 and 82, the temperatures at which we get cooling COPs
if(heating_yes) {COP_slope <- abs(COP_high-COP_low)/42
}else{COP_slope <- abs(COP_high - COP_low)/13}
# create some variables to calculate COP for the different temperature bins
temperature_bin_hours$COP <- 0
## set COP_high to be the COP at 65 degrees
if(heating_yes){
COP_high <- COP_high + COP_slope*(65-47)
temperature_bin_hours$COP <- COP_high - COP_slope*(65-temperature_bin_hours$HLY.TEMP.NORMAL)
} else{
COP_high <- COP_high + COP_slope*(82-65)
TKTK
}
# working off of the strategy used to calculate backup heating load, we now
# come up with weights for the different COP values. For example, if the COP
# at 35 degrees is 3.4, that should be weighted by the amount of heating
# the ASHP needs to provide during that temperature bin. We've already calculated
# this value in the backup heating function and it is the constant that is multiplied
# with b to find the design heating temp y.
total_load <- sum(temperature_bin_hours$load_proportion)
temperature_bin_hours$COP.Weight <- temperature_bin_hours$load_proportion/total_load
return(sum(temperature_bin_hours$COP.Weight*temperature_bin_hours$COP))
}
methane_leak <- function(input, methane_leakage_rate, energy_rate, density){
# convert the fuel/electricity input from mmBTUs to volume
## for electricity it's volume of fuel needed to create the electricity
input_volume <- input/energy_rate
# convert from volume to kilograms
input_weight <- input_volume*density
# use the leakage rate, which is as a proportion of produced fuel,
# to implied kg of methane
methane_leaked <- input_weight*methane_leakage_rate
# return the CO2e of the leaked methane
return(methane_leaked*GWP_CH4)
}
installment_costs <- function(df, nonmaterial_costs) {
material_cost <-  runif(1, min = df$systemcost_low, max = df$systemcost_high)
nonmaterial_low <- df$laborcost_low + df$jobsupplycost_low
nonmaterial_high <- df$laborcost_high + df$jobsupplycost_high
nonmaterial_cost <- nonmaterial_low + nonmaterial_costs*nonmaterial_high
return(material_cost + nonmaterial_cost)
}
#################### set key variables #####################
##### constants #####
#100-year global warming potential
#"Gases are converted to CO2e by multiplying by their global warming potential (GWP)"
GWP_CO2 <- 1
GWP_CH4 <- 28
GWP_N2O <- 265
#### monte carlo variables
set.seed(1111)
n_trials <- 1000
years_of_analysis <- 15
start_year <- 2022
#### set scenario variables ####
### comment out the ones that you don't want to use
##discount rate
#discount_rate <- 0.07
discount_rate <- 0.02
## determine carbon intensity of the grid
#### does so by specifying the year when the grid will have 0 emissions
#### the "aggressive decarbonization" option is meant to simulate a grid that becomes
#### 80% cheaper by 2035 and assumes it does so linearly and doesn't actually reflect
#### a belief that the grid will reach 0 carbon emissions by 2039. This comes from
#### the fact that some utilities are planning to remove all coal by 2035. The
#### grid may move much more slowly to 0 after those first 16 years and not actually
#### reach 0 by 2039.
decarb_year <- 2050 #BAU
##### read in necessary files ######################################
#### read in the geographic dataframe:
## counties
geo <- read.csv("./creating geographic data set/county_installprice_all_elec.csv")
#### read in and set up price projections for later
### values from EIA's projected costs of fuel/electricity over time.
### source: https://www.eia.gov/outlooks/aeo/data/browser/#/?id=3-AEO2022&sourcekey=0
projections_base <- read.csv("./Fuel cost data/EIA projections/Energy_Prices_Residential_projections.csv")
#changes order so first row is year 1 (i.e. 2021)
projections_base <- arrange(projections_base, year)
start <- which(projections_base$year == start_year)
end <- start + years_of_analysis - 1
projections_base <- projections_base[c(start:end),]
## convert to growth rates instead of absolute numbers
## keep the projections_base data since we will use it for areas for which we don't
## have spatial data
base <- projections_base[1,]
fuel_cost_growth_rates_base <- as.data.frame(t(apply(projections_base, 1, function(rowval) unlist(rowval / base))))
#### read in list of ASHP COPs
TKTKTK #update this? with the scraped data?
ASHP_COPs <- read.csv("ASHP random sample.csv")
ASHP_COPs <- select(ASHP_COPs, starts_with("cop"))
## temperature and load data
## source: https://www.ncei.noaa.gov/access/search/data-search/normals-hourly-2006-2020
temperature_bin_hours_base <- read.csv("./NREL Data/typical meteorological year weather/temperature data by county.csv")
## indoor design temperature
#source: https://focusonenergy.com/sites/default/files/bpdeemedsavingsmanuav10_evaluationreport.pdf
indoor_design_temperature <- 65 #degrees Fahrenheit
## outdoor design temperature csv
#source: https://casetext.com/regulation/wisconsin-administrative-code/agency-department-of-safety-and-professional-services/safety-buildings-and-environment/commercial-building-code/chapter-sps-363-energy-conservation/subchapter-ii-changes-additions-or-omissions-to-the-international-energy-conservation-code-iecc/section-sps-3630302-exterior-design-conditions
outdoor_design_temperature_base <- read.csv("./Temperature Data/Outdoor design temps by county.csv")
## electricity
elec_cost_base <- read.csv("./final electricity data.csv")
# heating load
heating_load_base <- read.csv("./NREL data/heating and cooling load/heating load by county.csv")
# cooling kWh
cooling_kWh_base <- read.csv("./NREL data/heating and cooling load/cooling kWh by county.csv")
## not to keep
### installation sizing and efficiency
TKTKTK
size <- 2
efficiency <- 16
ASHP_installment_file_base <- read.csv(paste0("./Installation costs/cost to install heat pump - ",size," ton ", efficiency, " SEER.csv"))
## after receiving feedback from PSC that questioned the Homewyse values, we chose
## to allow AC installment nonmaterial costs to equal ASHP installment costs.
AC_installment_file_base <- read.csv(paste0("./Installation costs/cost to install AC - ",size," ton ", efficiency, " SEER.csv"))
AC_installment_file_base[,c(6:9)] <- ASHP_installment_file_base[,c(6:9)]
NG_P_installment_file_base <- read.csv(paste0("./Installation costs/cost to install NG furnace - 70K BTU 92%+ efficiency.csv"))
HO_installment_file_base <- read.csv(paste0("./Installation costs/cost to install oil furnace - 70K BTU 85%+ efficiency.csv"))
ElecRes_installment_file_base <- read.csv("./Installation costs/cost to install 2 electric resistance baseboards.csv")
###efficiency variables - note that efficiency is a unitless value
# this can be thought of as the average efficiency of whichever furnace across
# users in Wisconsin
## source is the "typical" 2020 efficiency for the respective technologies from
## here: https://www.eia.gov/analysis/studies/buildings/equipcosts/pdf/appendix-a.pdf
## electric resistance efficiency comes from the text after the table
naturalgas_furnace_efficiency <- .92
heatingoil_furnace_efficiency <- .83
propane_furnace_efficiency <- .92
ElecRes_efficiency <- .98
wood_pellet_efficiency <- .77
wood_cord_efficiency <- .78
## wood prices - source: https://fyi.extension.wisc.edu/energy/files/2018/07/wood_heating_appliances_for_homes_and_businesses-1.pdf
## Also, EIA prices are given in 2021 $/mmBTU and we assume that wood prices will
## rise with inflation but have no information to lead them to change otherwise.
## therefore, we leave them to be the same throughout since having all prices at 2021 $/mmBTU
## means we don't need to account for inflation
wood_cord_cost <- 225 #2013 $/cord of wood
wood_cord_cost <- wood_cord_cost*1.16 #adjusted for inflation from 2013 to 2021: https://www.officialdata.org/us/inflation/2013?endYear=2021&amount=1
wood_cord_cost <- wood_cord_cost/22 #2021 $/mmBTU
wood_pellet_cost <- 190 #2013 $/ton of wood pellets
wood_pellet_cost <- wood_pellet_cost*1.16 #adjusting for inflation like above
wood_pellet_cost <- wood_pellet_cost/15.4 #2021 $/mmBTU
## wood heating installment costs come from eia. We assume they are the typical
## total installment costs in 2020 from the following source:
## url: https://www.eia.gov/analysis/studies/buildings/equipcosts/pdf/appendix-a.pdf
wood_cord_installment_cost <- 7600
wood_pellet_installment_cost <- 4700
###emissions variables (fuel data from https://www.epa.gov/sites/default/files/2021-04/documents/emission-factors_apr2021.pdf)
### WI grid specific electricity grid data is from https://www.epa.gov/system/files/documents/2022-01/egrid2020_summary_tables.pdf
#CO2
## CO2 associated with electricity being used for heating in pounds of CO2/MWh
electricity_CO2 <- 1184.9
## CO2 from burning natural gas in a furnace in kg of CO2 per mmBTU
naturalgas_CO2 <- 53.06
## CO2 from burning heating oil (Distillate Fuel Oil No. 2) in a furnace in kg of CO2 per mmBTU
heatingoil_CO2 <- 73.96
## CO2 from burning propane in a furnace in kg of CO2 per mmBTU
propane_CO2 <- 62.87
## CO2 from burning wood (Wood and Wood Residuals)
wood_CO2 <- 93.80
#CH4
# CH4 associated with electricity being used for heating in lb of CH4/MWh
electricity_CH4 <- 0.106
# CH4 from burning natural gas in a furnace in kg of CH4 per mmBTU
naturalgas_CH4 <- 1/1000
# CH4 from burning heating oil (Distillate Fuel Oil No. 2) in a furnace in kg of CH4 per mmBTU
heatingoil_CH4 <- 3/1000
# CH4 from burning propane in a furnace in kg of CH4 per mmBTU
propane_CH4 <- 3/1000
## CH4 from burning wood
wood_CH4 <- 7.2/1000
#N2O
# N2O associated with electricity being used for heating in pounds of N2O/MWh
electricity_N2O <- 0.015
# N2O from burning natural gas in a furnace in kg of N2O per mmBTU
naturalgas_N2O <- 0.1/1000
# N2O from burning heating oil (Distillate Fuel Oil No. 2) in a furnace in kg of N2O per mmBTU
heatingoil_N2O <- 0.6/1000
# N2O from burning propane in a furnace in kg of N2O per mmBTU
propane_N2O <- 0.6/1000
## N2O from burning wood
wood_N2O <- 3.6/1000
### decarbonization rate of the grid
#2020 is the year from which our grid emissions values come from
decarb <- 1/(decarb_year - 2020)
## energy to volume constants
mmBTU_per_cubic_ft_NG <- 0.001026 #source: https://www.epa.gov/sites/default/files/2021-04/documents/emission-factors_apr2021.pdf
mmBTU_per_gallon_HO <- 0.138 #source: https://www.epa.gov/sites/default/files/2021-04/documents/emission-factors_apr2021.pdf
mmBTU_per_gallon_P <- 0.091 #source: https://www.epa.gov/sites/default/files/2021-04/documents/emission-factors_apr2021.pdf
## volume to weight - if not specified, source: https://cngcenter.com/wp-content/uploads/2013/09/UnitsAndConversions.pdf
NG_density <- 0.717 #kg/m^3
m3_to_ft3 <- 35.3 #ft^3/m^3
cubic_ft_NG_to_kg <- NG_density/m3_to_ft3 #kg/ft^3
HO_density <- 0.87 #kg/L source: https://henrycounty.in.gov/DocumentCenter/View/318/Fuel-Oil-Number-2-PDF
liter_to_gallon <- 0.26 #gal/L
gallon_HO_to_kg <- HO_density/liter_to_gallon
P_density <- 0.495 #kg/L @ 25 degrees Celcius, source: https://www.engineeringtoolbox.com/specific-gravity-liquids-d_336.html
gallon_P_to_kg <- P_density/liter_to_gallon #kg/gallon, source: https://henrycounty.in.gov/DocumentCenter/View/318/Fuel-Oil-Number-2-PDF
### account for life-cycle emissions with regard to electricity production
# source: https://www.epa.gov/sites/default/files/2021-02/documents/egrid2019_summary_tables.pdf
# static (we assume these don't change over the course of the simulation)
proportion_electricity_from_oil <- 0.002
proportion_electricity_from_NG <- 0.358
proportion_electricity_from_nuclear <- 0.159
proportion_electricity_from_hydro <- 0.045
proportion_electricity_from_biomass <- 0.019
# we assume that all improvements to the grid during the simulation comes
# from the removal of coal from the grid and that it will be replaced with an
# equal proportion of solar and wind
proportion_electricity_from_coal <- 0.387
proportion_electricity_from_wind <- 0.029
proportion_electricity_from_solar <- 0.001
# the above figures are from 2020, so we update them to 2021 numbers so that
# they can be used in the iterative year for-loop below.
# The 1.25 (1/.8) reflects the fact that coal is removed from the grid at a rate
# faster than the grid reaches 0 emissions (e.g. in our aggressive case, all coal
# is removed by 2035, but the grid still has 20% of it's original emissions)
drop_in_coal <- proportion_electricity_from_coal*(decarb*1.25)
## every year update the amount of energy that is now in renewables
## we assume that all improvements in the grid come from switching coal to
## renewables. This just updates the values to 2021
proportion_electricity_from_coal <- proportion_electricity_from_coal - drop_in_coal
proportion_electricity_from_wind <- proportion_electricity_from_wind + drop_in_coal/2
proportion_electricity_from_solar <- proportion_electricity_from_solar + drop_in_coal/2
# lifecycle emission rates - not including combustion emissions, where applicable,
# since those are accounted for elsewhere
# source: https://www.nrel.gov/docs/fy21osti/80580.pdf
# all numbers are in kg CO2e/kWh
biomass_lifecycle <- 52/1000
photovoltaic_lifecycle <- 43/1000
hydro_lifecycle <- 21/1000
wind_lifecycle <- 13/1000
nuclear_lifecycle <- 13/1000
NG_lifecycle <- (0.8+71+0.02)/1000
#the literature lacks necessary details to come up with a non-combustion
#life-cycle figure for oil, but the literature often applies the same value to
#oil production emissions as to NG production emissions, so we do the same here
#with NG
oil_lifecycle <- NG_lifecycle
coal_lifecycle <- (5 + 10 + 5)/1000 # we assume that <5 is equal to 5
### clean the spatial dataset and determine which electric utility's data to use
geo <- filter(geo, Area.in.Square.Miles > 0.5)
geo <- filter(geo, !is.na(FIPS))
geo <- filter(geo, !(FID_COOP_UTILITY_BOUNDARIES_COO == -1 & FID_WI_IOU_UTILITY_BOUNDARIES_W == -1 & FID_WI_MUNI_UTILITY_BOUNDARIES_ == -1))
## we assume that the hierarchy of electricity usage is municipality >> coop >> IOU
geo <- mutate(geo, elec_utility = ifelse(FID_WI_MUNI_UTILITY_BOUNDARIES_ != -1, PSC_ID,
ifelse(FID_COOP_UTILITY_BOUNDARIES_COO != -1,
PSC_ID.1, PSC_ID.2)))
k <- 1
county <- geo[k,]$FIPS
price_region <- geo[k,]$price_region
elec_utility <- geo[k,]$elec_utility
#temperature bins
temperature_bin_hours <- filter(temperature_bin_hours_base, FIPS == county)
temperature_bin_hours <- select(temperature_bin_hours, temperature)
temperature_bin_hours <- arrange(temperature_bin_hours, temperature)
#outdoor design temperature
outdoor_design_temperature <- filter(outdoor_design_temperature_base, county_fips == county)
outdoor_design_temperature <- outdoor_design_temperature$Outdoor.Design.Temp
# heating load
heating_load <- select(heating_load_base, contains(as.character(county)))
# cooling kWh
cooling_kWh <- select(cooling_kWh_base, contains(as.character(county)))
# electricity cost
elec_cost <- filter(elec_cost_base, Utility.ID == elec_utility)
#convert from $/kWh to $/mmBTU
elec_cost$Rate <- elec_cost$Rate/3412*10^6
View(elec_cost_base)
View(elec_cost)
### keeps track of monte carlo results
track_trials <- data.frame(n = c(1:n_trials), NG = 0, HO = 0, P = 0, ASHP_NG = 0,
ASHP_HO = 0, ASHP_P = 0)
#base cost variables
## randomly choose what energy projections to run based on one of 10 different
## scenarios that EIA provides, which determines the price of all fuels/
## electricity over time for a given trial. (all prices are in 2020 $s/MMBTU)
scenario <- floor(runif(1, min = 1, max = 11))
columns <- c(scenario + 1, scenario + 11, scenario + 21, scenario + 31)
projections <- projections_base[,columns]
fuel_cost_growth_rates <- fuel_cost_growth_rates_base[,columns]
## use the january electricity cost to set the switchover temperature since
## it is representative of the price people will be paying for electricity
## when they're running their heat pump as a heater.
january_electric_cost <- elec_cost[1,]$Rate
## heating variables
#### calculate the proportion of heating load that the backup heating system
#### covers based on the switchover temperature
## Switch over temperature (above the switchover, the ASHP heats, below, the backup heats)
### Switch over temperature is determined by the relative prices of electricity and each
### respective fuel at year 1.
### we start with a COP value that is then translated into a temperature later with the use
### of the COP function
ASHP_NG_switchover_COP <- january_electric_cost*
(naturalgas_furnace_efficiency/
projections[1,which(str_detect(colnames(projections), "Natural.Gas"))])
ASHP_HO_switchover_COP <- january_electric_cost*
(heatingoil_furnace_efficiency/
projections[1,which(str_detect(colnames(projections), "Distillate.Fuel.Oil"))])
ASHP_P_switchover_COP <- january_electric_cost*
(propane_furnace_efficiency/
projections[1,which(str_detect(colnames(projections), "Propane"))])
ASHP_ElecRes_switchover_COP <- january_electric_cost*
(ElecRes_efficiency/
january_electric_cost)
ASHP_WoodCord_switchover_COP <- january_electric_cost*
(wood_cord_efficiency/
wood_cord_cost)
ASHP_WoodPellet_switchover_COP <- january_electric_cost*
(wood_pellet_efficiency/
wood_pellet_cost)
## proportion of heating load covered by backup - different for each fuel
## because of different switchovers first adjust the temperature_heating_bin
## data to account for heating load at each temperature bin
heating_bin_hours <- heatingbin_adjust(indoor_design_temperature,
outdoor_design_temperature, temperature_bin_hours)
#next determine the proportion of heating provided by backup for each fuel
ASHP_NG_backup_heating <- backupheatingload(heating_bin_hours, switchover)
ASHP_HO_backup_heating <- backupheatingload(heating_bin_hours, switchover)
#### generate heating COP values to translate switchover COP to a temperature
### COP values were found by taking a random sample of 10 ASHPs from the NEEP
### ASHP list with an SEER of 16 and a max heating capacity at 5 degrees of
### between 20000 and 40000 btu/hr. The below numbers are one standard deviation
### above and below the mean value found at both temperatures.
ASHP_num <- floor(runif(1, min = 1, max = (nrow(ASHP_COPs) + 1)))
heat_COP_low <- ASHP_COPs[ASHP_num,"cop.at.5"]
heat_COP_high <- ASHP_COPs[ASHP_num,"cop.at.47"]
### translate the COP to a temperature value: switchover_COP = COP_low + COP_slope*x, find x
#the 42 comes from the difference between 47 degrees and 5 degrees, the two
#temperatures at which we get COP values
COP_slope <- (heat_COP_high - heat_COP_low)/42
#the five comes from the fact that heat_COP_low is measured at 5 degrees
ASHP_NG_switchover <- ((ASHP_NG_switchover_COP - heat_COP_low)/COP_slope) + 5
ASHP_HO_switchover <- ((ASHP_HO_switchover_COP - heat_COP_low)/COP_slope) + 5
ASHP_P_switchover <- ((ASHP_P_switchover_COP - heat_COP_low)/COP_slope) + 5
ASHP_ElecRes_switchover <- ((ASHP_ElecRes_switchover_COP - heat_COP_low)/COP_slope) + 5
ASHP_WoodCord_switchover <- ((ASHP_WoodCord_switchover_COP - heat_COP_low)/COP_slope) + 5
ASHP_WoodPellet_switchover <- ((ASHP_WoodPellet_switchover_COP - heat_COP_low)/COP_slope) + 5
